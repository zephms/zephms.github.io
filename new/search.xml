<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CMD检查本地端口被占用情况</title>
      <link href="/new/2021/02/10/CMD%E6%A3%80%E6%9F%A5%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/"/>
      <url>/new/2021/02/10/CMD%E6%A3%80%E6%9F%A5%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li>扫描所有端口</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><ul><li>扫描所有端口并在结果中搜索字符串</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | fundstr &quot;:<span class="number">800</span>&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在右键菜单中添加复制文件名或者路径的功能(原理)</title>
      <link href="/new/2021/02/10/Right-Menu-To-Copy-Path-principle/"/>
      <url>/new/2021/02/10/Right-Menu-To-Copy-Path-principle/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="简单添加右键菜单并执行指令"><a href="#简单添加右键菜单并执行指令" class="headerlink" title="简单添加右键菜单并执行指令"></a>简单添加右键菜单并执行指令</h3><p>1, Win+R regedit 启动注册表<br>2, 这里以文件右键菜单为例,在注册表中打开一下目录:</p><img src="image-20210210152826142.png" alt="image-20210210152826142" style="zoom:67%;" /><p>可以看到,Path就是我添加进去的,右键菜单中的选项,新建Path之后,就可以看到文件的右键菜单有了”Path”字样</p><p>3,如果想把Path当成父目录,下设一级菜单的话,在path下新建如图所示键值:</p><img src="image-20210210153137525.png" alt="image-20210210153137525" style="zoom: 50%;" /><p>并下设shell键,shell键不用设置任何内容</p><img src="image-20210210153234690.png" alt="image-20210210153234690" style="zoom: 67%;" /><p>4,shell下设的内容就是下一级菜单内容,这里我设置了三个,shell键和下设的三个键不用设置任何值</p><p>5,三个键,比如File Name,本身不设键值,要下设一个键,键名为command,一定要是command,command键的默认键值的数据字段为要执行的内容</p><img src="image-20210210153507605.png" alt="image-20210210153507605" style="zoom: 67%;" /><p>一般由xxx.exe和参数构成, %1表示右键选择的文件路径和文件名</p><h3 id="注册表与菜单的对应关系"><a href="#注册表与菜单的对应关系" class="headerlink" title="注册表与菜单的对应关系"></a>注册表与菜单的对应关系</h3><p>上一个大标题的对应的是文件右键的菜单</p><p>文件夹右键的内容是不在上面的</p><p>文件夹右键的菜单在这里:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hkcr\Directory\shell\Path</span><br></pre></td></tr></table></figure><h3 id="reg操作注册表"><a href="#reg操作注册表" class="headerlink" title="reg操作注册表"></a>reg操作注册表</h3><p>windows中有一个可执行文件,叫reg.exe,提供了操作注册表的办法.</p><p>详细讲好多嘞,简单举个例子:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg.exe add hkcr\*\shell\<span class="built_in">Path</span> /v SubCommands /t REG_SZ</span><br></pre></td></tr></table></figure><p>👆 hhkr指HKEY_CLASSES_ROOT,其他缩写可以百度,add表示添加,”/v SubCommands /t REG_SZ”表示类型为REG_SZ,名称为SubCommands的键,内容为空.如果想设置内容,就在后面加一段 /d xxx</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg.exe add hkcr\*\shell\<span class="built_in">Path</span>\shell\&quot;File Name&quot;\command /ve /t REG_SZ /d $exePath&quot; name &#x27;%<span class="number">1</span>&#x27; &quot;</span><br></pre></td></tr></table></figure><p>👆 巩固一下,这句话的意思是,add添加,hkcr*\shell\Path\shell&quot;File Name”\command键的值, 这里是/ve,是一个特殊的/v属性,表示默认参数,这句话的意思是,默认参数为,REG_SZ类型的 数据为$exePath” name ‘%1’ “的键值.</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg.exe delete hkcr\*\shell\<span class="built_in">Path</span> /f</span><br></pre></td></tr></table></figure><p>👆这是删除,上面的add表示添加,对应的就是删除, /f指令表示force,如果没有/f参数,是需要二次确认的,完整命令的意思就是,删除hkcr*\shell\Path键,不提示直接删除</p><h3 id="获取文件名并输出到剪贴板"><a href="#获取文件名并输出到剪贴板" class="headerlink" title="获取文件名并输出到剪贴板"></a>获取文件名并输出到剪贴板</h3><p>上面提到的指令,中的%1就是完整的路径文件名,传入exe中作为一个参数出现的,那么这个exe处理这个参数就可以了</p><p>下面这个是python的实现方法,python确实效率不高,打包之后有6M左右,以后有机会再换C实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> win32clipboard <span class="keyword">as</span> w</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv)&lt;<span class="number">3</span>:</span><br><span class="line">    quit()</span><br><span class="line"></span><br><span class="line">args = sys.argv</span><br><span class="line">fullPathName = args[<span class="number">2</span>][<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 当最后一个是斜杠的时候会有问题,但是暂时没出现最后是斜杠的情况</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="number">1</span>]==<span class="string">&quot;name&quot;</span>:</span><br><span class="line">    cp = fullPathName.split(<span class="string">&quot;\\&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">elif</span> args[<span class="number">1</span>]==<span class="string">&quot;pathu&quot;</span>:</span><br><span class="line">    cp = fullPathName</span><br><span class="line"><span class="keyword">elif</span> args[<span class="number">1</span>]==<span class="string">&quot;pathd&quot;</span>:</span><br><span class="line">    cp = fullPathName.replace(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(cp)</span></span><br><span class="line"></span><br><span class="line">w.OpenClipboard()</span><br><span class="line">w.EmptyClipboard()</span><br><span class="line">w.SetClipboardText(cp)</span><br><span class="line">w.CloseClipboard()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在右键菜单中添加复制文件名或者路径的功能(使用说明)</title>
      <link href="/new/2021/02/10/Right-Menu-To-Copy-Path/"/>
      <url>/new/2021/02/10/Right-Menu-To-Copy-Path/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法:"></a>安装方法:</h3><p><a href="https://github.com/zephms/Right-Menu-To-Copy-Path/releases/download/v0.1/Windows.zip">点击下载</a></p><p>解压Windows.zip,将其中的exe文件放在一个合适的位置(可以根据需要更改文件名)</p><p>然后用记事本或其他文本编辑器打开install.ps1,将下面引号中的exe路径改为上一步放的位置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$exePath</span> = <span class="string">&quot;D:\xxx\rightClick.exe&quot;</span></span><br></pre></td></tr></table></figure><p>在install.ps1所在目录启动powershell,输入:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.ps1</span><br></pre></td></tr></table></figure><p>若没有报错的话,就已经安装好了,exe文件不要随意动,如果动了,需要重新更改install脚本中的文件路径,并安装,不过此时会提示覆盖安装,选择yes就好了. 至于install和uninstall两个脚本,动倒无所谓,别丢了就行,还得下载</p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载:"></a>卸载:</h3><p>用和install.ps1同样的方法,执行uninstall</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./uninstall.ps1</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>目前,多文件选中时,仅复制一个文件的文件名,有啥建议可以来GitHub提issue :)</p><p><a href="https://github.com/zephms/Right-Menu-To-Copy-Path/">zephms/Right-Menu-To-Copy-Path: 给右键菜单添加复制文件名或者路径的功能 (github.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>命令行中使用代理</title>
      <link href="/new/2021/02/07/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/"/>
      <url>/new/2021/02/07/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h5 id="注意-测试代理可用不可用-不要用ping命令-而要使用curl命令-如"><a href="#注意-测试代理可用不可用-不要用ping命令-而要使用curl命令-如" class="headerlink" title="注意:测试代理可用不可用,不要用ping命令,而要使用curl命令,如"></a>注意:测试代理可用不可用,不要用ping命令,而要使用curl命令,如</h5><ul><li><h3 id="针对cmd"><a href="#针对cmd" class="headerlink" title="针对cmd"></a>针对cmd</h3></li></ul><p>在VPN软件中设置一个端口,这里以ssr代理,1080端口为例</p><img src="image-20201212210926621.png" alt="image-20201212210926621" style="zoom:67%;" /><p>在cmd中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://127.0.0.1:1080</span><br><span class="line"><span class="built_in">set</span> https_proxy=https://127.0.0.1:1080</span><br></pre></td></tr></table></figure><ul><li><h3 id="针对powershell"><a href="#针对powershell" class="headerlink" title="针对powershell"></a>针对powershell</h3></li></ul><p>powershell走的是网络层, 正好能被SSR、SS或V2Ray代理，不用手动设置了, 而无需手动设置代理</p><p>但是要是想代理,也不是不行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:http_proxy</span>=<span class="string">&quot;http://127.0.0.1:1080&quot;</span></span><br><span class="line"><span class="variable">$env:https_proxy</span>=<span class="string">&quot;http://127.0.0.1:1080&quot;</span></span><br></pre></td></tr></table></figure><ul><li><h3 id="git-bash"><a href="#git-bash" class="headerlink" title="git bash"></a>git bash</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line">git config --global http.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span> </span><br><span class="line">git config --global https.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过socket进行本地的进程间通信</title>
      <link href="/new/2021/02/06/%E9%80%9A%E8%BF%87socket%E8%BF%9B%E8%A1%8C%E6%9C%AC%E5%9C%B0%E7%9A%84%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/new/2021/02/06/%E9%80%9A%E8%BF%87socket%E8%BF%9B%E8%A1%8C%E6%9C%AC%E5%9C%B0%E7%9A%84%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>我的一个python程序需要写一个界面,最终定的是逻辑使用python,界面使用electron进行开发,electron的逻辑是由node来解释执行的,所以我把python作为node的一个子线程,node进程和python进程之间使用socket进行通信.</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>我需要一个进程等待另一个进程下达指令,接收到指令后,分析并执行,然后给出返回值</p><img src="image-20210206190449967.png" alt="image-20210206190449967" style="zoom: 67%;" /><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>socket的原理简单来说,就是插头和插座, 一个插座可以由任意一个插头插上,插上就可以导电了. 同样,在socket中分为服务器端和客户端,服务器端进行监听,服务端在需要的时候发送数据包到服务端,服务端处理请求,将返回值返回给客户端.</p><p>当然,socket的运行,是需要借用一个端口的,服务端基于端口进行监听,客户端向端口发送数据.</p><p>由于通信协议,这些数据在传输的时候是以字节进行传输的,在python中体现为byte类型,在node中体现为buffer,用这种类型确实可以方便我们精确控制每一个字节传输的内容,而且如果合理利用可以提高传输效率.但是我考虑到byte类型与顶层逻辑之间转换的麻烦,决定使用字符串进行传输,按utf8进行编码.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>服务端:</p><p>服务端处理数据,我设置了一个表示处理数据的函数analysis,这个函数接收一个字符串类型的参数,处理,并返回一个字符串类型的参数.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端代码 python版</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">analysis</span>(<span class="params">str_</span>):</span></span><br><span class="line">    print(str_)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hhh,&quot;</span>+str_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">800</span></span><br><span class="line">address = (host, port)</span><br><span class="line">time_now = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%S:%M&quot;</span>, time.localtime())</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">s.bind(address)</span><br><span class="line">s.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">&quot;Waiting for connections...&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        client_connection, client_address = s.accept()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Got connection from&quot;</span>, client_connection.getpeername())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># client_connection.settimeout(5)</span></span><br><span class="line">            buf = client_connection.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(buf) == <span class="number">0</span>: <span class="comment"># break,跳出while循环</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                client_connection.send(<span class="built_in">bytes</span>(analysis(buf.decode()), encoding=<span class="string">&quot;utf8&quot;</span>))  </span><br><span class="line">    <span class="keyword">except</span> (KeyboardInterrupt, SystemError):</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    client_connection.close()</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    traceback.print_exc()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端代码,node版</span></span><br><span class="line"><span class="comment">// 1 引入模块</span></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> analysis = <span class="function"><span class="keyword">function</span>(<span class="params">str_</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hhh, &quot;</span>+ str_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 创建服务器</span></span><br><span class="line"><span class="keyword">let</span> clientArr = [];</span><br><span class="line"><span class="keyword">const</span> server = net.createServer();</span><br><span class="line"><span class="comment">// 3 绑定链接事件</span></span><br><span class="line">server.on(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">person</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(clientArr.length);</span><br><span class="line">  <span class="comment">// 记录链接的进程</span></span><br><span class="line">  person.id = clientArr.length;</span><br><span class="line">  clientArr.push(person);</span><br><span class="line">  person.setEncoding(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  <span class="comment">// 客户socket进程绑定事件</span></span><br><span class="line">  person.on(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    clientArr.forEach(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 数据写入全部客户进程中</span></span><br><span class="line">      <span class="comment">//////////// 数据在这里处理</span></span><br><span class="line">      val.write(analysis(chunk));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  person.on(<span class="string">&quot;close&quot;</span>, <span class="function">(<span class="params">p1</span>) =&gt;</span> &#123;</span><br><span class="line">    clientArr[p1.id] = <span class="literal">null</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  person.on(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">p1</span>) =&gt;</span> &#123;</span><br><span class="line">    clientArr[p1.id] = <span class="literal">null</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">800</span>);</span><br></pre></td></tr></table></figure><p>客户端:</p><p>客户端由一个csend函数,csend函数唯一的参数就是发送的数据,返回值是从服务器端返回的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端代码, python版</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">port = <span class="number">800</span></span><br><span class="line">address = (host, port)</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect(address)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csend</span>(<span class="params">mes</span>):</span></span><br><span class="line">    s.send(<span class="built_in">bytes</span>(mes, encoding=<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        buf = s.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">return</span> buf.decode()</span><br><span class="line">    <span class="keyword">except</span> e:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Error receiving :&quot;</span>, e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment">#sys.exit(1) # 终止程序用</span></span><br><span class="line"></span><br><span class="line">mes = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">print(csend(mes))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s.shutdown(socket.SHUT_WR)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端代码, node版</span></span><br><span class="line"><span class="comment">// 1 引入模块</span></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&quot;readline&quot;</span>);</span><br><span class="line"><span class="comment">// 2 创建套接字和输入输出命令行</span></span><br><span class="line"><span class="keyword">let</span> rl = readline.createInterface(&#123;</span><br><span class="line">  <span class="comment">// 调用std接口</span></span><br><span class="line">  input: process.stdin,</span><br><span class="line">  output: process.stdout,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> client = <span class="keyword">new</span> net.Socket();</span><br><span class="line"><span class="comment">// 3 链接</span></span><br><span class="line">client.connect(<span class="number">800</span>, <span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"></span><br><span class="line">client.setEncoding(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"><span class="comment">// 绑定输io流事件,获取输入输出字符</span></span><br><span class="line"><span class="comment">// rl.on(&#x27;line&#x27;,(mes)=&gt;&#123;</span></span><br><span class="line"><span class="comment">// client.write(mes);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">client.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">csend</span>(<span class="params">mes</span>) </span>&#123;</span><br><span class="line">  client.write(mes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">csend(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>服务端二选一,运行起来,然后执行客户端代码,客户端也是二选一,运行之后控制台会有输出</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>由于我的python进程需要执行很长时间,因此python部分加入了多线程,一下就是举个例子,似乎不是那么有通用性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">此文件作为python后台的控制中心</span></span><br><span class="line"><span class="string">接收并处理 来自前端和子python进程 的指令 并 启动子线程完成任务</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注,暂时子python进程可以直接向前端发送数据,也可以向此父进程发送数据再转发, 看开发者心情</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">接收信息格式: json字符串</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;command&quot;:&quot;online_check_in&quot; // 必须</span></span><br><span class="line"><span class="string">    &quot;其他&quot;:...  // 其他根据情况选择</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">子进程未设置推出,估计会自动退出,后续解决</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">thread_template</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, threadID, name, get</span>):</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadID = threadID</span><br><span class="line">        self.name = name</span><br><span class="line">        self.get = get</span><br><span class="line">        self.command = get.get(<span class="string">&quot;command&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;开启线程： &quot;</span> + self.name)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;此线程执行的指令为&quot;</span>, self.command)</span><br><span class="line">        <span class="comment"># 此处的get为字典类型,具有command字段,其他字段由传入决定</span></span><br><span class="line">        <span class="keyword">if</span> self.command == <span class="string">&quot;online_check_in&quot;</span>:</span><br><span class="line">            <span class="comment"># camera.m()</span></span><br><span class="line">            <span class="comment">####################<span class="doctag">TODO:</span> 在此处执行此时的方法,可以用全局方法,推荐使用类方法</span></span><br><span class="line">            <span class="comment">#<span class="doctag">TODO:</span>执行线上点名的python脚本</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">elif</span> self.command == <span class="string">&quot;offline_check_in&quot;</span>:</span><br><span class="line">            <span class="comment"># todo:执行线下点名的python脚本</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">elif</span> self.command == <span class="string">&quot;online_check_behavior&quot;</span>:</span><br><span class="line">            <span class="comment"># todo:执行线上行为检测的python脚本</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">elif</span> self.command == <span class="string">&quot;offline_check_behavior_danger&quot;</span>:</span><br><span class="line">            <span class="comment"># todo:执行线下危险行为检测的python脚本</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">elif</span> self.command == <span class="string">&quot;offline_check_behavior_state&quot;</span>:</span><br><span class="line">            <span class="comment"># todo:执行线下状态检测的python脚本</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">elif</span> self.command == <span class="string">&quot;record_face&quot;</span>:</span><br><span class="line">            camera.m()</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;出现了意想不到的情况&quot;</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># 获取锁，用于线程同步</span></span><br><span class="line">        <span class="comment"># threadLock.acquire()</span></span><br><span class="line">        self.print_time(self.name, self.counter, <span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 释放锁，开启下一个线程</span></span><br><span class="line">        <span class="comment"># threadLock.release()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_time</span>(<span class="params">self, threadName, delay, counter</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            print(self.threadID, time.gmtime())</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 锁</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">analysis</span>(<span class="params">str_</span>):</span></span><br><span class="line">    get = json.load(str_)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> get.get(<span class="string">&quot;command&quot;</span>):</span><br><span class="line">        print(<span class="string">&quot;接收数据不包含指令,内容为&quot;</span>,str_)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    th = thread_template(thread_id_count, get.get(<span class="string">&quot;command&quot;</span>), get)</span><br><span class="line">    threads.append(th)</span><br><span class="line">    th.start()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hhh,&quot;</span>+str_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">800</span></span><br><span class="line">address = (host, port)</span><br><span class="line">time_now = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%S:%M&quot;</span>, time.localtime())</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">s.bind(address)</span><br><span class="line">s.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">threads = [] <span class="comment"># 进程们</span></span><br><span class="line">threadLock = threading.Lock() <span class="comment"># 锁</span></span><br><span class="line">thread_id_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">&quot;Waiting for connections...&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        client_connection, client_address = s.accept()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Got connection from&quot;</span>, client_connection.getpeername())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># client_connection.settimeout(5)</span></span><br><span class="line">            buf = client_connection.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(buf) == <span class="number">0</span>: <span class="comment"># break,跳出while循环</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                client_connection.send(<span class="built_in">bytes</span>(analysis(buf.decode()), encoding=<span class="string">&quot;utf8&quot;</span>))  </span><br><span class="line">    <span class="keyword">except</span> (KeyboardInterrupt, SystemError):</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    client_connection.close()</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    traceback.print_exc()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows10路径过长 解决办法</title>
      <link href="/new/2021/02/04/%E8%B7%AF%E5%BE%84%E8%BF%87%E9%95%BF/"/>
      <url>/new/2021/02/04/%E8%B7%AF%E5%BE%84%E8%BF%87%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>还在解决中,先填坑占位</p><img src="%E8%B7%AF%E5%BE%84%E8%BF%87%E9%95%BF/image-20210204210025986.png" alt="image-20210204210025986" style="zoom: 67%;" /><p>经查证,原有文件名字路径长度</p><p>C:\Users\m1576\Desktop\behavior-electron-vue-master\node_modules\pac-proxy-agent\node_modules\https-proxy-agent.github</p><p>这是由于全局utf8导致的</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>拍一拍文案</title>
      <link href="/new/2021/02/04/%E6%8B%8D%E4%B8%80%E6%8B%8D/"/>
      <url>/new/2021/02/04/%E6%8B%8D%E4%B8%80%E6%8B%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="抄来的微信拍一拍后缀文案"><a href="#抄来的微信拍一拍后缀文案" class="headerlink" title="抄来的微信拍一拍后缀文案"></a>抄来的微信拍一拍后缀文案</h1><p><img src="v2-96944c20753a77154316ce02f3454bc1_b.jpg" alt="100句超火搞笑、微信拍一拍后缀文案！"></p><ol><li><p>拍了拍我的 砖头表示自己很怂</p></li><li><p> 拍了拍我的 衣服掉了一地灰</p></li><li><p> 拍了拍我的 枕头说过去点一起</p></li><li><p> 拍了拍我的 球弹弹弹走鱼尾纹</p></li><li><p> 拍了拍我的 窗户露出一张鬼脸</p></li><li><p> 拍了拍我的 狗子转头就是一口</p></li><li><p>拍了拍我的屁股，然后走人</p></li><li><p>拍了拍我的素颜表示磕碜至极</p></li><li><p>拍了拍我的钱包说养我一辈子</p></li><li><p>拍了拍我的儿子说大哥您好！</p></li><li><p>拍了拍我的米饭说再来十碗</p></li><li><p>拍了拍我的前任坟头并烧了香</p></li><li><p>拍了拍我的垃圾桶说我爱我家</p></li><li><p>拍了拍我的 小脑瓜然后变成猪</p></li><li><p>拍了拍我的 脑门，明明没烧啊</p></li><li><p>拍了拍我的 良心，啊，并没有</p></li><li><p>拍了拍我的 狗头并且踹了一脚</p></li><li><p>拍了拍我的 呆毛表示手感极佳</p></li><li><p>拍了拍我的 头顶却没摸到秀发</p></li><li><p>拍了拍我的 肩膀并喊了声爹</p></li><li><p>拍了拍我的 脑袋怀疑注水过度</p></li><li><p>拍了拍我的 脑瓜表示并不灵光</p></li><li><p>拍了拍我的 膝盖并跳起来打我</p></li><li><p>拍了拍我的 脚并被无情地踹飞</p></li><li><p>拍了拍我的 背，您这泥儿真多</p></li><li><p>拍了拍我的 对象，发现在做梦</p></li><li><p>拍了拍我的 钱包说养我一辈子</p></li><li><p>拍了拍我的方便面并碎了一地</p></li><li><p>拍了拍我的黄瓜并撒了把盐</p></li><li><p>拍了拍我的头像并喊了声爹</p></li><li><p>拍了拍我的狗还和狗抢吃的</p></li><li><p>拍了拍我的肩膀说爸辛苦了</p></li><li><p>拍了拍我的 床说睡吧要梦到我</p></li><li><p>拍了拍我的 床说猪啊还在睡</p></li><li><p>拍了拍我的 飞船表示也想上天</p></li><li><p>拍了拍我的 大奔（一切奢侈品）感到十分嫉妒</p></li><li><p>拍了拍我的 后座说送我回家</p></li><li><p>拍了拍我的钱包说真穷</p></li><li><p>拍了拍我的床让我少睡点</p></li><li><p>拍了拍我的西瓜，想挖一勺</p></li><li><p>拍了拍我的奶茶，想喝一口</p></li><li><p>拍了拍我的八块腹肌直流口水</p></li><li><p>拍了拍我的胸说“咋这大个”</p></li><li><p>拍了拍我的我的领导说，开了我</p></li><li><p>拍了拍我的自己的马屁</p></li><li><p>拍了拍我的小嘴说女人你在玩火</p></li><li><p>拍了拍我的脑袋说要快快长大</p></li><li><p>拍了拍我的脑袋说没事小家伙</p></li><li><p>拍了拍我的肚子决定请她吃饭</p></li><li><p>拍了拍我的头却听到噗通噗通</p></li><li><p>拍了拍我的小脑袋觉得很可爱</p></li><li><p>拍了拍我的肚子问：几个月了</p></li><li><p>拍了拍我的小脸并啵儿了一口</p></li><li><p>拍了拍我的头被一脚踹飞</p></li><li><p>拍了拍我的小屁股被揍了</p></li><li><p>拍了拍我的膝盖还要搭梯子</p></li><li><p>拍了拍我的脸蛋说美女在吗</p></li><li><p>拍了拍我的头说你是仙女吗</p></li><li><p>拍了拍我的胸发现她并没有</p></li><li><p>拍了拍我的的素颜照被吓哭</p></li><li><p>拍了拍我的前任遗照上的灰尘</p></li><li><p>拍了拍我的的世界第一帅证书</p></li><li><p>拍了拍我的的世界第一美证书</p></li><li><p>拍了拍我的马桶，留下了口水</p></li><li><p>拍了拍我的车,说打工不可能的</p></li><li><p>拍了拍我的小鹿说怎么还不撞</p></li><li><p>拍了拍我的钱包决定给她转账</p></li><li><p>拍了拍我的傻逼队友的脑瓜子</p></li><li><p>拍了拍我的桃树说要快点开花</p></li><li><p>拍了拍我的窗户露出一张鬼脸</p></li><li><p>拍了拍我的砖头表示自己很怂</p></li><li><p>拍了拍我的桌子，姐就是不服</p></li><li><p>拍了拍我的喇叭，前面的让开</p></li><li><p>拍了拍我的城堡大门却被赶走</p></li><li><p>拍了拍我的网易云，说生而为人</p></li><li><p>拍了拍我的兰博基尼让我载她</p></li><li><p>拍了拍我的胸说好大</p></li><li><p>拍了拍我的肩膀说爸你辛苦了</p></li><li><p>拍了拍我的头 并叫了声爸爸</p></li><li><p>拍了拍我的尊贵的脚指头</p></li><li><p>拍了拍我的男朋友（易烊千玺，王源，王俊凯，杨洋，李易峰等等）</p></li><li><p>拍了拍我的女朋友（赵丽颖，迪丽热巴，古力娜扎等等）</p></li><li><p>拍了拍我的宇宙飞船要我让座</p></li><li><p>拍了拍我的脑袋瓜说 真聪明</p></li><li><p>拍了拍我的充满智慧的大脑</p></li><li><p>拍了拍我的膝盖说 拍不到头</p></li><li><p>拍了拍我的鞋说 假的</p></li><li><p>拍了拍我的小脑瓜 然后变成猪</p></li><li><p>拍了拍我的 良心 啊 没有</p></li><li><p>拍了拍我的 圆润肚子 还可以吃</p></li><li><p>拍了拍我的肩膀，说你真的不胖</p></li><li><p>拍了拍我的手说：就这？</p></li><li><p>拍了拍我的 后背叫了声大哥</p></li><li><p>拍了拍我的 问你不会百度吗</p></li><li><p>拍了拍我的 头发说什么洗发水</p></li><li><p>拍了拍我的 瘪钱包哭出了声</p></li><li><p>拍了拍我的 饭碗给了一只鸡腿</p></li><li><p>拍了拍我的 仙人掌哈哈大笑</p></li><li><p>拍了拍我的 宠物叫了声祖宗</p></li><li><p>拍了拍我的 皮肤说吹弹可破</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 国内镜像</title>
      <link href="/new/2021/02/04/Python%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/"/>
      <url>/new/2021/02/04/Python%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="一次性使用"><a href="#一次性使用" class="headerlink" title="一次性使用"></a>一次性使用</h3><ul><li>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a>  numpy表示安装numpy库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple </span><br></pre></td></tr></table></figure><ul><li><p>其他的镜像源:<br>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>豆瓣(douban) <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></p></li><li><p>库名查询:</p><p>[PyPi](<a href="https://pypi.org/">PyPI · The Python Package Index</a>)</p></li></ul><h3 id="长期使用"><a href="#长期使用" class="headerlink" title="长期使用"></a>长期使用</h3><p>Windows新建C:\Users\xx\pip\pip.ini文件,</p><p>Linux新建 ~/.pip/pip.conf</p><p>然后填入以下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="attr">trusted-host</span> = pypi.tuna.tsinghua.edu.cn</span><br><span class="line"><span class="attr">disable-pip-version-check</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">timeout</span> = <span class="number">120</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/new/2021/02/03/hello-world/"/>
      <url>/new/2021/02/03/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>经典的问候(这里应该有一张图片,但是还无法显示,目前努力中)</p><img src="source/img/assets/image-20210204134821689.png" alt="image-20210204134821689" style="zoom:25%;" />]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
