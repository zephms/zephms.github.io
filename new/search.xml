<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/new/2021/03/03/LINUX/Linux%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B/"/>
      <url>/new/2021/03/03/LINUX/Linux%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="linux-为何物"><a href="#linux-为何物" class="headerlink" title="linux 为何物"></a>linux 为何物</h4><p>Linux 就是一个操作系统，就像你多少已经了解的 Windows（xp，7，8）和 Mac OS 。至于操作系统是什么，就不用过多解释了，如果你学习过前面的入门课程，应该会有个基本概念了，这里简单介绍一下操作系统在整个计算机系统中的角色。</p><img src="Linux%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B/1-1.png" alt="图1-1" style="zoom:80%;" /><p>我们的 Linux 主要是系统调用和内核那两层。当然直观地看，我们使用的操作系统还包含一些在其上运行的应用程序，比如文本编辑器、浏览器、电子邮件等。</p><h4 id="UNIX进化史"><a href="#UNIX进化史" class="headerlink" title="UNIX进化史"></a>UNIX进化史</h4><p><img src="Linux%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B/1467262784463.png" alt="1"></p><h4 id="大致路径"><a href="#大致路径" class="headerlink" title="大致路径"></a>大致路径</h4><p><img src="Linux%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B/1-8.png" alt="1"></p><h4 id="shell的一些快捷键"><a href="#shell的一些快捷键" class="headerlink" title="shell的一些快捷键"></a>shell的一些快捷键</h4><table><thead><tr><th>按键</th><th>作用</th></tr></thead><tbody><tr><td><code>Ctrl+d</code></td><td>键盘输入结束或退出终端</td></tr><tr><td><code>Ctrl+s</code></td><td>暂停当前程序，暂停后按下任意键恢复运行</td></tr><tr><td><code>Ctrl+z</code></td><td>将当前程序放到后台运行，恢复到前台为命令<code>fg</code></td></tr><tr><td><code>Ctrl+a</code></td><td>将光标移至输入行头，相当于<code>Home</code>键</td></tr><tr><td><code>Ctrl+e</code></td><td>将光标移至输入行末，相当于<code>End</code>键</td></tr><tr><td><code>Ctrl+k</code></td><td>删除从光标所在位置到行末</td></tr><tr><td><code>Alt+Backspace</code></td><td>向前删除一个单词</td></tr><tr><td><code>Shift+PgUp</code></td><td>将终端显示向上滚动</td></tr><tr><td><code>Shift+PgDn</code></td><td>将终端显示向下滚动</td></tr></tbody></table><h4 id="shell常用的通配符"><a href="#shell常用的通配符" class="headerlink" title="shell常用的通配符"></a>shell常用的通配符</h4><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配 0 或多个字符</td></tr><tr><td><code>?</code></td><td>匹配任意一个字符</td></tr><tr><td><code>[list]</code></td><td>匹配 list 中的任意单一字符</td></tr><tr><td><code>[^list]</code></td><td>匹配 除 list 中的任意单一字符以外的字符</td></tr><tr><td><code>[c1-c2]</code></td><td>匹配 c1-c2 中的任意单一字符 如：[0-9][a-z]</td></tr><tr><td><code>&#123;string1,string2,...&#125;</code></td><td>匹配 string1 或 string2 (或更多)其一字符串</td></tr><tr><td><code>&#123;c1..c2&#125;</code></td><td>匹配 c1-c2 中全部字符 如{1..10}</td></tr></tbody></table><h4 id="获得帮助-man手册"><a href="#获得帮助-man手册" class="headerlink" title="获得帮助(man手册)"></a>获得帮助(man手册)</h4><p>man <command> 查询指令对应的帮助</p><p>通常 man 手册中的内容很多，你可能不太容易找到你想要的结果，不过幸运的是你可以在 man 中使用搜索<code>/&lt;你要搜索的关键字&gt;</code>，查找完毕后你可以使用<code>n</code>键切换到下一个关键字所在处，<code>shift+n</code>为上一个关键字所在处。使用<code>Space</code>（空格键）翻页，<code>Enter</code>（回车键）向下滚动一行，或者使用<code>k</code>，<code>j</code>（vim 编辑器的移动键）进行向前向后滚动一行。按下<code>h</code>键为显示使用帮助（因为 man 使用 less 作为阅读器，实为<code>less</code>工具的帮助），按下<code>q</code>退出。</p><p>想要获得更详细的帮助，你还可以使用<code>info</code>命令，不过通常使用<code>man</code>就足够了。如果你知道某个命令的作用，只是想快速查看一些它的某个具体参数的作用，那么你可以使用<code>--help</code>参数，大部分命令都会带有这个参数</p><h4 id="字符画命令"><a href="#字符画命令" class="headerlink" title="字符画命令"></a>字符画命令</h4><p>安装 banner</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sysvbanner</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">banner acbs</span><br><span class="line">printerbanner -w 50 ACBS</span><br></pre></td></tr></table></figure><p>w是宽度的意思,在显示屏中显示比较小,必须加上宽度限制</p><p>其他的还有toilet figlet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install toilet</span><br><span class="line">sudo apt-get install giglet</span><br></pre></td></tr></table></figure><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">who am i</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者(完全相同)</span></span><br><span class="line">who mom likes</span><br></pre></td></tr></table></figure><img src="Linux%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B/document-uid735639labid3timestamp1531731170296.png" alt="img" style="zoom:80%;" /><p>输出的第一列表示打开当前伪终端的用户的用户名（要查看当前登录用户的用户名，去掉空格直接使用 <code>whoami</code> 即可），第二列的 <code>pts/0</code> 中 <code>pts</code> 表示伪终端，所谓伪是相对于 <code>/dev/tty</code> 设备而言的，还记得上一节讲终端时的那七个使用 <code>[Ctrl]</code>+<code>[Alt]</code>+<code>[F1]～[F7]</code> 进行切换的 <code>/dev/tty</code> 设备么，这是“真终端”，伪终端就是当你在图形用户界面使用 <code>/dev/tty7</code> 时每打开一个终端就会产生一个伪终端，<code>pts/0</code> 后面那个数字就表示打开的伪终端序号，你可以尝试再打开一个终端，然后在里面输入 <code>who am i</code>，看第二列是不是就变成 <code>pts/1</code> 了，第三列则表示当前伪终端的启动时间。</p><p>还有一点需要注意的是，在某些环境中 <code>who am i</code> 和 <code>who mom likes</code> 命令不会输出任何内容，这是因为当前使用的 SHELL 不是登录时的 SHELL，没有用户与 who 的 stdin 相关联，因此不会输出任何内容。例如我在本地的 Ubuntu 系统上输入这个命令就不会有提示。</p><img src="Linux%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B/uid871732-20200302-1583140204433" alt="图片描述" style="zoom:80%;" /><p>此时我们只需要打开一个登录 SHELL 的终端例如 Tmux，或者通过 ssh 登录到本机，再在新的终端里执行命令即可。</p><h4 id="who命令的其他参数"><a href="#who命令的其他参数" class="headerlink" title="who命令的其他参数"></a>who命令的其他参数</h4><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-a</code></td><td>打印能打印的全部</td></tr><tr><td><code>-d</code></td><td>打印死掉的进程</td></tr><tr><td><code>-m</code></td><td>同<code>am i</code>，<code>mom likes</code></td></tr><tr><td><code>-q</code></td><td>打印当前登录用户数及用户名</td></tr><tr><td><code>-u</code></td><td>打印当前登录用户登录信息</td></tr><tr><td><code>-r</code></td><td>打印运行等级</td></tr></tbody></table><h4 id="查看和切换用户"><a href="#查看和切换用户" class="headerlink" title="查看和切换用户"></a>查看和切换用户</h4><p>一般 /home下的每一个文件夹就是一个普通目录</p><p><code>su &lt;user&gt;</code> 可以切换到用户 user，执行时需要输入目标用户的密码，</p><p><code>sudo &lt;cmd&gt;</code> 可以以特权级别运行 cmd 命令，需要当前用户属于 sudo 组，且需要输入当前用户的密码。</p><p><code>su - &lt;user&gt;</code> 命令也是切换用户，但是同时用户的环境变量和工作目录也会跟着改变成目标用户所对应的。退出当前用户跟退出终端一样，可以使用 <code>exit</code> 命令或者使用快捷键 <code>Ctrl+D</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser lilei # 新建一个叫lilei的用户</span><br><span class="line">sudo passwd lilei # 设置对应账户的密码,也可以设置当前账户的密码</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/new/2021/03/02/JAVA/java%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/"/>
      <url>/new/2021/03/02/JAVA/java%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Java SE5开始提供自动装箱</p><p>简单来说就是这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">10</span>); <span class="comment">// 手动装箱</span></span><br><span class="line"></span><br><span class="line">Integer i = <span class="number">10</span>;  <span class="comment">// 自动装箱</span></span><br><span class="line"><span class="keyword">int</span> n = i;   <span class="comment">// 自动拆箱</span></span><br></pre></td></tr></table></figure><p>自动将基本数据类型转换成包装器类型,自动将包装器类型转换为基本数据类型.</p><p>比如下面这段代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> n = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译的时候,可以看出,装箱的时候,调用的是Integer的valueOf(int)方法.</p><p>拆箱的时候自动调用Integer的intValue方法</p><p>举个栗子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        Integer i1 = <span class="number">100</span>;</span><br><span class="line">        Integer i2 = <span class="number">100</span>;</span><br><span class="line">        Integer i3 = <span class="number">200</span>;</span><br><span class="line">        Integer i4 = <span class="number">200</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(i1==i2);</span><br><span class="line">        System.out.println(i3==i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为 true false</p><p>因为,  i1和i2指向的是同一个对象,而i3和i4指向的是不同的对象,此时翻翻源码</p><p>这是valueOf:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= -<span class="number">128</span> &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + <span class="number">128</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是IntegerCache:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// high value may be configured by property</span></span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Use Long.decode here to avoid invoking methods that</span></span><br><span class="line">                <span class="comment">// require Integer&#x27;s autoboxing cache to be initialized</span></span><br><span class="line">                <span class="keyword">int</span> i = Long.decode(integerCacheHighPropValue).intValue();</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - -low);</span><br><span class="line">            &#125;</span><br><span class="line">            high = h;</span><br><span class="line"></span><br><span class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ 引用类型</title>
      <link href="/new/2021/03/02/CPP/cpp%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
      <url>/new/2021/03/02/CPP/cpp%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>$\alpha$<br>hhh</p><p>// 引用类型<br>// 引用类型是cpp中新增加的类型,用标识符&amp;来表示,<br>// 本质是对已经有的变量起的一个别名<br>// 一般形式: 数据类型 &amp; 引用变量名 = 已定义过的变量名<br>float x = 5;<br>float &amp; y1 = x; //针对一个变量,重新定义一个别名<br>cout&lt;&lt;y1&lt;&lt;endl;<br>// 引用类型可以用在函数传参上,使用引用进行接受参数<br>// 例如:<br>int max_a=3, max_b=8, max_res;<br>bs_max(max_a, max_b, max_res); // 传入的是int类型,使用引用类型进行接收.这样,函数内部的更改就是对int类型的更改<br>cout&lt;&lt;max_res&lt;&lt;endl;</p><p>// const类型<br>cout&lt;&lt;”============”&lt;&lt;endl;<br>// 关键字const可以用来限制 变量,函数参数,函数返回值 的修改<br>// const修饰一个变量的时候,则限定该变量在定义域范围内为常量,并要求该变量在初始化的时候进行赋值,以后不允许重新赋值或者修改<br>// c语言时,使用的是宏定义命令常量,即 #define, cpp后就用const定义常量<br>//      相对于宏定义,const可以用来进行类型检查,且可以像局部变量一样在程序的任意位置进行定义<br>const int Maxlen = 50;<br>// todo 此处应该补上关于 限制函数参数,函数返回值 的方法</p><p>// 函数<br>// 相对与c,cpp的函数有很多优点, 主要体现在 1,要求函数原型, 2,允许内联函数, 3,带缺省值的函数, 4,函数重载 ,…<br>int show1(); // 只要定义了函数原型,系统编译即可通过, 然后再程序后面补上函数体就可以,如果不补的话依旧运行不了,会报错undefined reference<br>show1();<br>// 内联函数:<br>// 在函数声明的时候加上inline字样,此时编译器会将 程序中出现的对该函数的调用 用该函数的函数体 来代替,用于提高运行效率<br>// 另外,内联函数中不允许使用 循环和开关 ,否则系统将其视为普通函数<br>// 内联函数的使用会增加代码量,但是会提高性能,也有说,用空间换取时间<br>// 网上还提到一点:类结构中所在的类说明内部定义的函数是内联函数。 具体等看看类再说啵<br>// todo 对应上一行<br>// 带缺省参数的函数:<br>// 函数的参数可以带有默认值,但是默认值的设置要遵守从右到左的顺序, 即 若某个参数有默认值,则后面必须都有默认值<br>defaultPara(5, 6); // 使用的时候从左到右填入,不可以跳着填,最后的可以省略<br>// 缺省参数的优点– 1方便函数调用语句的书写, 2,方便软件系统的扩张和改进,函数增加功能后,可以通过缺省参数的形式保证原有程序的正确运行<br>//          3, 方便类的构造函数设计</p><p>// 函数的重载:<br>// 建立多个函数名相同,但是参数列表不相同的函数.<br>// 函数返回类型可以相同,也可以不同,但是形参必须不同,这种不同可以是参数个数不同也可以是参数类型不同<br>// 函数的重载又称为函数的多态性.通过改变形参个数或类型使多个函数共用一个函数名</p><p>// 名字空间:<br>// 名字空间可以看作一个比程序模块更大的包,在名字空间中可以封装代码<br>// 使用方式– 1, 使用作用域运算符”::”, 2,使用using namespace xxx语句,将所有名字在该空间内可见<br>first_space::func();<br>second_space::func();</p><p>// cpp内存动态分配:<br>// cpp新增 new和delete运算符,用于动态存储空间的分配和释放<br>// 所谓动态存储空间,是指系统提供的一个叫做堆的内存区域,需要用的时候,使用new申请,不使用的时候使用delete释放内存空间给系统<br>// new一般形式: new 类型名 (初始值) | new 类型名 [数组个数]<br>// 申请单个变量时,可以有初始值,申请数组的时候不能有初始值,只接受数组个数<br>// 当动态空间申请不成功的时候new会返回空指针NULL<br>// delete一般格式: delete 指针 (释放指针的空间) | delete[] 指针 (释放动态数组的空间)<br>char* string1, s1[]=”Data Structure”;<br>int length = 14;<br>string1 = new char[length];<br>for(int i=0;i&lt;length;i++){<br>string1[i] = s1[i];<br>}<br>cout&lt;&lt;string1&lt;&lt;endl;<br>cout&lt;&lt;s1&lt;&lt;endl;</p><pre><code>return 0;</code></pre><p>}</p><p>int show1(){<br>    cout&lt;&lt;”show1 function”&lt;&lt;endl;<br>}</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 标准IO</title>
      <link href="/new/2021/03/01/CPP/cpp%E6%A0%87%E5%87%86io/"/>
      <url>/new/2021/03/01/CPP/cpp%E6%A0%87%E5%87%86io/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="cpp-标准IO"><a href="#cpp-标准IO" class="headerlink" title="cpp 标准IO"></a>cpp 标准IO</h3><p>cpp兼容了C语言的IO系统,并且独创了面向对象式的系统</p><p>流的概念:将输入输出看作一个流,不需要考虑具体设备的细节</p><h5 id="书写格式"><a href="#书写格式" class="headerlink" title="书写格式:"></a>书写格式:</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span>&gt;&gt;内容&gt;&gt;内容&gt;&gt;...;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;内容&lt;&lt;内容&lt;&lt;...;</span><br></pre></td></tr></table></figure><p>cin: 是istream中的对象, 用来进行标准输入</p><p>cout: 是ostream中的对象, 用来进行标准输出</p><h5 id="设置IO格式"><a href="#设置IO格式" class="headerlink" title="设置IO格式:"></a>设置IO格式:</h5><ul><li>设置IO格式时 cpp预定义的算子:</li></ul><p>dec hex oct : 十进制, 十六进制, 八进制<br>ws : 输入跳过开始的空格<br>endl : 换行并刷新输出流<br>ends : 插入空字符结束字符串<br>setw(int w) : 设置输出宽度<br>flush : 刷新输出流(从缓存区实际输出)<br>setbase : 转换基数设置<br>setiosflags(long f) : 设置格式标志<br>resetiosflags(long f) : 解除设置格式标志<br>setfill(int c) : 填充字符<br>setprecision(int p) : 设置填充精度</p><ul><li>注意</li></ul><p>1, 定义即生效,对整个流都有效果<br>2, setwn对于更长的字符串没有效果,但是如果是较短的字符串会自动在左侧进行补齐 (此命令只起作用1次)<br>3, setiostream(ios::left)和setiosflags(ios::right)用来控制屏幕输出字符左对齐还是右对齐, 默认是右对齐<br>4, serfill设置填充字符,默认是空格</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;setfill(<span class="string">&#x27;h&#x27;</span>)&lt;&lt;setw(<span class="number">7</span>)&lt;&lt;<span class="number">1234</span>&lt;&lt;<span class="built_in">endl</span>; 更换默认的填充字符</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;setiosflags(ios::left)&lt;&lt;setw(<span class="number">7</span>)&lt;&lt;<span class="number">1234</span>&lt;&lt;<span class="built_in">endl</span>; 更换默认的对齐方式</span><br></pre></td></tr></table></figure><p>5, 一个流只有处于无错状态,我们才能对其进行读写,确定一个流对象的状态的最简单的方法是将其作为一个条件来使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while(cin&gt;&gt;word)</span><br></pre></td></tr></table></figure><h5 id="高级的IO"><a href="#高级的IO" class="headerlink" title="高级的IO"></a>高级的IO</h5><ul><li>三个头文件</li></ul><table><thead><tr><th>Header</th><th align="left">Type</th><th></th></tr></thead><tbody><tr><td>iostream</td><td align="left">istream 从流中读取<br />ostream 写到流中去<br />iostream 对流进行读写,从  istream 和 ostream 派生而来</td><td>定义读写控制窗口的类型</td></tr><tr><td>fstream</td><td align="left">ifstream 从文件中读取, 由  istream 派生而来<br />ofstream 写到文件中去, 由  ostream 派生而来<br />fstream 读写文件, 由  iostream 派生而来</td><td>定义读写已命名文件的类型</td></tr><tr><td>sstream</td><td align="left">istringstream 从  string 对象中读取, 由 istream 派生而来<br />ostringstream 写到  string 对象中去, 由 ostream 派生而来<br />stringstream 对 string  对象进行读写, 由 iostream 派生而来</td><td>定义用于读写存储在内存中的 string 对象</td></tr></tbody></table><ul><li>缓冲区</li></ul><p>非系统的IO都会认为增加缓冲区来提高IO效率,cpp标准IO也不例外,以下是触发缓冲区刷新的方式</p><ol><li>程序正常结束,作为main函数return的一部分.</li><li>缓冲区满时,要刷新缓冲,新的数据才能写入.</li><li>可以使用操纵符如endl来显式刷新缓冲区.</li><li>在每个输出操作之后,我们可以用操纵符unitbuf设置流的内部状态,来清空缓冲区.默认情况下,对cerr就是设置unitbuf的.</li><li>一个输出流可能会被关联到另一个流,这种情况下,当读写被关联的流时,关联到流的缓冲区会被刷新.例如,默认情况下,cin和cerr都关联到cout,所以,读cin或者写cerr都会导致cout的缓冲区被刷新.</li></ol><p>刷新输出缓冲区:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;hi&quot;</span>&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//输出hi和一个换行,然后刷新缓冲区</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;hi&quot;</span>&lt;&lt;flush; <span class="comment">//输出hi,然后刷新缓冲区</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;hi&quot;</span>&lt;&lt;ends; <span class="comment">//输出hi和一个空字符,然后刷新缓冲区</span></span><br></pre></td></tr></table></figure><p>unitbuf设置方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;unitbuf; &#x2F;&#x2F;所有输出操作后都会立刻刷新缓冲区</span><br><span class="line">cout&lt;&lt;nounitbuf; &#x2F;&#x2F;回到正常的缓冲方式</span><br></pre></td></tr></table></figure><p>注意 程序崩溃的时候,会有数据停留在缓冲区中没出来,可以考虑确认刷新.</p><p>… 还有好多</p><p><a href="https://www.jianshu.com/p/1c83da435755">https://www.jianshu.com/p/1c83da435755</a></p><p><a href="https://www.cnblogs.com/1zhk/p/5014442.html">https://www.cnblogs.com/1zhk/p/5014442.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 数据类型</title>
      <link href="/new/2021/03/01/CPP/cpp%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/new/2021/03/01/CPP/cpp%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型:"></a>数据类型:</h3><p>使用编程语言进行编程时，需要用到各种变量来存储各种信息。变量保留的是它所存储的值的内存位置。这意味着，当创建一个变量时，就会在内存中保留一些空间。可能需要存储各种数据类型（比如字符型、宽字符型、整型、浮点型、双浮点型、布尔型等）的信息，操作系统会根据变量的数据类型，来分配内存和决定在保留内存中存储什么。</p><p>相对于C语言,cpp在枚举类型和结构体类型上有所提高</p><h4 id="7种内置的基本数据类型"><a href="#7种内置的基本数据类型" class="headerlink" title="7种内置的基本数据类型"></a>7种内置的基本数据类型</h4><table><thead><tr><th align="left">类型</th><th align="left">关键字</th></tr></thead><tbody><tr><td align="left">布尔型</td><td align="left">bool</td></tr><tr><td align="left">字符型</td><td align="left">char</td></tr><tr><td align="left">整型</td><td align="left">int</td></tr><tr><td align="left">浮点型</td><td align="left">float</td></tr><tr><td align="left">双浮点型</td><td align="left">double</td></tr><tr><td align="left">无类型</td><td align="left">void</td></tr><tr><td align="left">宽字符型</td><td align="left">wchar_t (本质是short int)</td></tr></tbody></table><p>一些基本类型可以使用一个或多个类型修饰符进行修饰, 类型修饰符包括 signed,unsigned,short,long</p><p>添加修饰符后的数据类型效果是这样的:   (具体数据会根据编译器不同和不同系统有所差异)</p><table><thead><tr><th align="left">类型</th><th align="left">位</th><th align="left">范围</th></tr></thead><tbody><tr><td align="left">char</td><td align="left">1 个字节</td><td align="left">-128 到 127 或者 0 到 255</td></tr><tr><td align="left">unsigned char</td><td align="left">1 个字节</td><td align="left">0 到 255</td></tr><tr><td align="left">signed char</td><td align="left">1 个字节</td><td align="left">-128 到 127</td></tr><tr><td align="left">int</td><td align="left">4 个字节</td><td align="left">-2147483648 到 2147483647</td></tr><tr><td align="left">unsigned int</td><td align="left">4 个字节</td><td align="left">0 到 4294967295</td></tr><tr><td align="left">signed int</td><td align="left">4 个字节</td><td align="left">-2147483648 到 2147483647</td></tr><tr><td align="left">short int</td><td align="left">2 个字节</td><td align="left">-32768 到 32767</td></tr><tr><td align="left">unsigned short int</td><td align="left">2 个字节</td><td align="left">0 到 65,535</td></tr><tr><td align="left">signed short int</td><td align="left">2 个字节</td><td align="left">-32768 到 32767</td></tr><tr><td align="left">long int</td><td align="left">8 个字节</td><td align="left">-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr><tr><td align="left">signed long int</td><td align="left">8 个字节</td><td align="left">-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr><tr><td align="left">unsigned long int</td><td align="left">8 个字节</td><td align="left">0 到 18,446,744,073,709,551,615</td></tr><tr><td align="left">float</td><td align="left">4 个字节</td><td align="left">精度型占4个字节（32位）内存空间，+/- 3.4e +/- 38 (~7 个数字)</td></tr><tr><td align="left">double</td><td align="left">8 个字节</td><td align="left">双精度型占8 个字节（64位）内存空间，+/- 1.7e +/- 308 (~15 个数字)</td></tr><tr><td align="left">long double</td><td align="left">16 个字节</td><td align="left">长双精度型 16 个字节（128位）内存空间，可提供18-19位有效数字。</td></tr><tr><td align="left">wchar_t</td><td align="left">2 或 4 个字节</td><td align="left">1 个宽字符</td></tr></tbody></table><p>具体的判断似乎可以通过下列代码来完成,但是有些数据类型我没有运行通过</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 所占字节数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">bool</span>&gt;::max)() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 最大值</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">bool</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 最小值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型:"></a>枚举类型:</h4><p>在cpp中,枚举类型是一种真正的类型,形式如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> &lt;</span>表示符&gt; &#123;&lt;枚举列表&gt;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span> &#123;</span>Red, Green, Yellow&#125;;</span><br></pre></td></tr></table></figure><p>其中,enum是枚举类型标识,枚举列表定义了该枚举类型的所有枚举值.<br>定义枚举类型之后,就可以定义该枚举类型的变量.枚举类型的变量只允许赋值操作:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Color myColor;</span><br><span class="line">myColor = Yellow; <span class="comment">// 对枚举类型执行赋值操作</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;myColor&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 结果为2 对应的是序号2,说明存储的是符号数字常量2</span></span><br></pre></td></tr></table></figure><p>详细参考菜鸟教程 <a href="https://www.runoob.com/w3cnote/cpp-enum-intro.html">https://www.runoob.com/w3cnote/cpp-enum-intro.html</a></p><h4 id="结构体数据类型"><a href="#结构体数据类型" class="headerlink" title="结构体数据类型:"></a>结构体数据类型:</h4><p>大致与c语言相同,比c更加简单,结构体一旦定义,就可以用来定义变量,而不用加标识符struct,</p><p>在cpp中,结构体相当于没有私有成员的类, 不过struct中是可以定义方法的,静态和成员都可以)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct Student&#123;</span><br><span class="line">    long number;</span><br><span class="line">    char name[10];</span><br><span class="line">    char sex[4];</span><br><span class="line">    int age;</span><br><span class="line">    static void hello()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;hello world&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Student student &#x3D; &#123;100001, &quot;张三&quot;, &quot;男&quot;, 26&#125;,y&#123;&#125;,z&#123;&#125;,*p; &#x2F;&#x2F; 将Student 实例化4个</span><br><span class="line">&#x2F;&#x2F; 另, 由于clang-tidy的事, 实例化空的时候也带上括号,但是不带括号也行.</span><br><span class="line">y.number &#x3D; student.number; &#x2F;&#x2F; 等号赋值</span><br><span class="line">p &#x3D; &amp;student; &#x2F;&#x2F; 地址赋值</span><br><span class="line">z.number &#x3D; p-&gt;number; &#x2F;&#x2F; 指针赋值</span><br><span class="line">Student::hello();</span><br></pre></td></tr></table></figure><h4 id="typedef-创造数据类型"><a href="#typedef-创造数据类型" class="headerlink" title="typedef 创造数据类型:"></a>typedef 创造数据类型:</h4><p>定义后, bs就是int的另一个名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef int bs; </span><br></pre></td></tr></table></figure><p>如此就可以创建一个整型变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bs L;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cv2 中文路径打开失败</title>
      <link href="/new/2021/02/25/cv2%E4%B8%AD%E6%96%87%E8%B7%AF%E5%BE%84%E6%89%93%E5%BC%80%E5%A4%B1%E8%B4%A5/"/>
      <url>/new/2021/02/25/cv2%E4%B8%AD%E6%96%87%E8%B7%AF%E5%BE%84%E6%89%93%E5%BC%80%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>工具函数解决问题:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def cv_read(file_path):</span><br><span class="line">    cv_img &#x3D; cv2.imdecode(np.fromfile(file_path, dtype&#x3D;np.uint8), -1)</span><br><span class="line">    return cv_img</span><br></pre></td></tr></table></figure><p><a href="https://www.zhihu.com/question/67157462">https://www.zhihu.com/question/67157462</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> opencv cv2 python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyqt5 QLabel</title>
      <link href="/new/2021/02/14/pyqt5-QLabel/"/>
      <url>/new/2021/02/14/pyqt5-QLabel/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="常用信号"><a href="#常用信号" class="headerlink" title="常用信号"></a>常用信号</h3><table><thead><tr><th>信号</th><th>描述</th></tr></thead><tbody><tr><td>linkActivated</td><td>当单击标签中嵌入的超链接,希望在新窗口中打开这个超链接时,setOpenExternalLinks特性必须设置为true</td></tr><tr><td>linkHovered</td><td>当指针划过时候触发</td></tr></tbody></table><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>setAlignment()</td><td>设置文本对齐方式,可设置的有<br /> - Qt.AlignLeft Qt.AlignRight Qt.AlignCenter水平方向左右中对齐<br /> -  Qt.AlignJustify 水平方向调整间距两端对齐</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pyqt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用pyuic5工具将调用ui文件转换为python类</title>
      <link href="/new/2021/02/13/%E4%BD%BF%E7%94%A8pyuic5%E5%B7%A5%E5%85%B7%E5%B0%86%E8%B0%83%E7%94%A8ui%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BApython%E7%B1%BB/"/>
      <url>/new/2021/02/13/%E4%BD%BF%E7%94%A8pyuic5%E5%B7%A5%E5%85%B7%E5%B0%86%E8%B0%83%E7%94%A8ui%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BApython%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="原有代码"><a href="#原有代码" class="headerlink" title="原有代码"></a>原有代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"><span class="keyword">from</span> PyQt5.uic <span class="keyword">import</span> loadUi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>(<span class="params">QMainWindow</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MainWindow, self).__init__(parent)</span><br><span class="line">        loadUi(<span class="string">&#x27;main.ui&#x27;</span>, self)</span><br><span class="line">        self.refresh.clicked.connect(self.refresh1)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">refresh1</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.output1.setText(<span class="string">&quot;dsafasdf&quot;</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">w = MainWindow()</span><br><span class="line">w.show()</span><br><span class="line">sys.exit(app.exec())</span><br></pre></td></tr></table></figure><h1 id="ui文件生成python类"><a href="#ui文件生成python类" class="headerlink" title="ui文件生成python类"></a>ui文件生成python类</h1><p>在电脑中找到pyuic5.exe可执行文件,在cmd中输入 D:/…/pyuic5.exe xxx.ui,会得到转换完成的python类,如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_MainWindow</span>(<span class="params">QMainWindow</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span>(<span class="params">self, MainWindow</span>):</span></span><br><span class="line">        MainWindow.setObjectName(<span class="string">&quot;MainWindow&quot;</span>)</span><br><span class="line">        MainWindow.resize(<span class="number">943</span>, <span class="number">736</span>)</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">        self.centralwidget.setObjectName(<span class="string">&quot;centralwidget&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="生成的python类与原有代码合并"><a href="#生成的python类与原有代码合并" class="headerlink" title="生成的python类与原有代码合并"></a>生成的python类与原有代码合并</h1><ul><li><p>删除loadui行</p></li><li><p>使原有代码的类 继承 生成代码的类</p></li><li><p>原有代码的__init__方法,参数修改为(self), __init__方法增加如下三行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>(ui.Ui_MainWindow, self).__init__()</span><br><span class="line">self.setupUi(self)</span><br><span class="line">self.retranslateUi(self)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pyqt5 </tag>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS快速查询笔记</title>
      <link href="/new/2021/02/13/web/CSS%E5%BF%AB%E9%80%9F%E6%9F%A5%E8%AF%A2/"/>
      <url>/new/2021/02/13/web/CSS%E5%BF%AB%E9%80%9F%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="css属性"><a href="#css属性" class="headerlink" title="css属性"></a>css属性</h3><h4 id="权重分配"><a href="#权重分配" class="headerlink" title="权重分配"></a>权重分配</h4><p>css权重 内联&gt;id&gt;class&gt;标签和通配符</p><h4 id="附加注意"><a href="#附加注意" class="headerlink" title="附加注意"></a>附加注意</h4><p>em 相对单位,相对于最近的父元素的字号大小变化而变化, 但是 本身,子类字号就是跟着父类走的</p><h4 id="文本css"><a href="#文本css" class="headerlink" title="文本css"></a>文本css</h4><p>字体颜色 color:red;<br>字体大小 font-size:16px; 字体的默认大小是16px<br>字体的水平对齐方式: text-align:left/center/right<br>字体 font-family 可以设置多种字体,从第一个开始适配<br>字体粗细 font-weight bold/normal(默认normal)之类的,或者用100-900表示,500等价于normal<br>文字倾斜 font-style normal不倾斜 italic倾斜<br>水平对齐方式 text-aligin left/right/center/justify(两端对齐)</p><h4 id="背景css"><a href="#背景css" class="headerlink" title="背景css"></a>背景css</h4><p>background-color: 颜色<br>background-image: 背景图<br>background-repeat: 重复 可x方向重复,y方向重复,还有no-repeat</p><p>background-size: cover表示完全覆盖  图片大小<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-size">https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-size</a><br>background-attachment: fixed 背景固定,就是不随滑动条滑动</p><h4 id="列表CSS"><a href="#列表CSS" class="headerlink" title="列表CSS"></a>列表CSS</h4><p>list-style:none;  去掉小黑点或者数字</p><h4 id="其他css"><a href="#其他css" class="headerlink" title="其他css"></a>其他css</h4><p>宽度 width<br>高度 height</p><h4 id="浮动css属性"><a href="#浮动css属性" class="headerlink" title="浮动css属性"></a>浮动css属性</h4><p>1,浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。2,由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。</p><p>用途: </p><p>1, 图文排版</p><p>2.竖着的元素横着排列: 比如全体float:left 然后加一个父类,给父类设置高度使得下一个元素不会串上来</p><h3 id="W3C盒模型"><a href="#W3C盒模型" class="headerlink" title="W3C盒模型"></a>W3C盒模型</h3><p>内容-padding-border-margin</p><h4 id="margin"><a href="#margin" class="headerlink" title="margin:"></a>margin:</h4><p>1, 一共四个, margin-left / margin-right /  margin-top / margin-bottom</p><p>简写:  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 80<span class="selector-tag">px</span> 30<span class="selector-tag">px</span> 50<span class="selector-tag">px</span> 50<span class="selector-tag">px</span> (顺时针 上右下左)</span><br><span class="line"><span class="selector-tag">margin</span>: 80<span class="selector-tag">px</span> 30<span class="selector-tag">px</span> (上下 <span class="selector-tag">-</span> 左右)</span><br><span class="line"><span class="selector-tag">margin</span>: 30<span class="selector-tag">px</span> (所有)</span><br></pre></td></tr></table></figure><p>2, 可以用margin来做水平居中:</p><p>只能用在有宽度 并且宽度生效的元素(大标签) 做水平居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 0 <span class="selector-tag">auto</span>;</span><br></pre></td></tr></table></figure><h4 id="border"><a href="#border" class="headerlink" title="border:"></a>border:</h4><p>以下三条最好一起出现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-color</span>: 边框颜色</span><br><span class="line"><span class="selector-tag">border-width</span>: 边框宽度</span><br><span class="line"><span class="selector-tag">border-style</span>: 边框样式 (可选值: 实线<span class="selector-tag">solid</span> 虚线<span class="selector-tag">dashed</span> 点划线<span class="selector-tag">dotted</span> 双线<span class="selector-tag">double</span>)</span><br></pre></td></tr></table></figure><p>简写: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: <span class="selector-tag">red</span> 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span>; (顺序随便)</span><br></pre></td></tr></table></figure><p>注意 边框会加在原有元素外,使原有元素的宽高撑大. 所以可以考虑把元素变小一点</p><p>栗子 用边框画三角形: (原理是两个相邻的边框是不同颜色的时候,交叉的部分是一条斜线分开的)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top-color</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="padding"><a href="#padding" class="headerlink" title="padding:"></a>padding:</h4><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><p>1, 子元素设置margin top的时候会使父元素整体下移,可在父元素上设置overflow:hidden来避免</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyqt5调用ui文件作为主界面</title>
      <link href="/new/2021/02/12/pyqt5%E8%B0%83%E7%94%A8ui%E6%96%87%E4%BB%B6%E4%BD%9C%E4%B8%BA%E4%B8%BB%E7%95%8C%E9%9D%A2/"/>
      <url>/new/2021/02/12/pyqt5%E8%B0%83%E7%94%A8ui%E6%96%87%E4%BB%B6%E4%BD%9C%E4%B8%BA%E4%B8%BB%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="最简单版"><a href="#最简单版" class="headerlink" title="最简单版"></a>最简单版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"><span class="keyword">from</span> PyQt5.uic <span class="keyword">import</span> loadUi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>(<span class="params">QMainWindow</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MainWindow, self).__init__(parent)</span><br><span class="line">        loadUi(<span class="string">&#x27;main.ui&#x27;</span>, self)</span><br><span class="line">        self.refresh.clicked.connect(self.refresh1)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">refresh1</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.output1.setText(<span class="string">&quot;dsafasdf&quot;</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">w = MainWindow()</span><br><span class="line">w.show()</span><br><span class="line">sys.exit(app.exec())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pyqt5 </tag>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完整的reg操作注册表</title>
      <link href="/new/2021/02/10/%E5%AE%8C%E6%95%B4%E7%9A%84reg%E6%93%8D%E4%BD%9C%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
      <url>/new/2021/02/10/%E5%AE%8C%E6%95%B4%E7%9A%84reg%E6%93%8D%E4%BD%9C%E6%B3%A8%E5%86%8C%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMD检查本地端口被占用情况</title>
      <link href="/new/2021/02/10/CMD%E6%A3%80%E6%9F%A5%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/"/>
      <url>/new/2021/02/10/CMD%E6%A3%80%E6%9F%A5%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li>扫描所有端口</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><ul><li>扫描所有端口并在结果中搜索字符串</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | <span class="built_in">findstr</span> &quot;:<span class="number">800</span>&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在右键菜单中添加复制文件名或者路径的功能(原理)</title>
      <link href="/new/2021/02/10/Right-Menu-To-Copy-Path-principle/"/>
      <url>/new/2021/02/10/Right-Menu-To-Copy-Path-principle/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="简单添加右键菜单并执行指令"><a href="#简单添加右键菜单并执行指令" class="headerlink" title="简单添加右键菜单并执行指令"></a>简单添加右键菜单并执行指令</h3><p>1, Win+R regedit 启动注册表<br>2, 这里以文件右键菜单为例,在注册表中打开一下目录:</p><img src="image-20210210152826142.png" alt="image-20210210152826142" style="zoom:67%;" /><p>可以看到,Path就是我添加进去的,右键菜单中的选项,新建Path之后,就可以看到文件的右键菜单有了”Path”字样</p><p>3,如果想把Path当成父目录,下设一级菜单的话,在path下新建如图所示键值:</p><img src="image-20210210153137525.png" alt="image-20210210153137525" style="zoom: 50%;" /><p>并下设shell键,shell键不用设置任何内容</p><img src="image-20210210153234690.png" alt="image-20210210153234690" style="zoom: 67%;" /><p>4,shell下设的内容就是下一级菜单内容,这里我设置了三个,shell键和下设的三个键不用设置任何值</p><p>5,三个键,比如File Name,本身不设键值,要下设一个键,键名为command,一定要是command,command键的默认键值的数据字段为要执行的内容</p><img src="image-20210210153507605.png" alt="image-20210210153507605" style="zoom: 67%;" /><p>一般由xxx.exe和参数构成, %1表示右键选择的文件路径和文件名</p><h3 id="注册表与菜单的对应关系"><a href="#注册表与菜单的对应关系" class="headerlink" title="注册表与菜单的对应关系"></a>注册表与菜单的对应关系</h3><p>上一个大标题的对应的是文件右键的菜单</p><p>文件夹右键的内容是不在上面的</p><p>文件夹右键的菜单在这里:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hkcr\Directory\shell\Path</span><br></pre></td></tr></table></figure><h3 id="reg操作注册表"><a href="#reg操作注册表" class="headerlink" title="reg操作注册表"></a>reg操作注册表</h3><p>windows中有一个可执行文件,叫reg.exe,提供了操作注册表的办法.</p><p>详细讲好多嘞,简单举个例子:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg.exe add hkcr\*\shell\<span class="built_in">Path</span> /v SubCommands /t REG_SZ</span><br></pre></td></tr></table></figure><p>👆 hhkr指HKEY_CLASSES_ROOT,其他缩写可以百度,add表示添加,”/v SubCommands /t REG_SZ”表示类型为REG_SZ,名称为SubCommands的键,内容为空.如果想设置内容,就在后面加一段 /d xxx</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg.exe add hkcr\*\shell\<span class="built_in">Path</span>\shell\&quot;File Name&quot;\command /ve /t REG_SZ /d $exePath&quot; name &#x27;%<span class="number">1</span>&#x27; &quot;</span><br></pre></td></tr></table></figure><p>👆 巩固一下,这句话的意思是,add添加,hkcr*\shell\Path\shell&quot;File Name”\command键的值, 这里是/ve,是一个特殊的/v属性,表示默认参数,这句话的意思是,默认参数为,REG_SZ类型的 数据为$exePath” name ‘%1’ “的键值.</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg.exe delete hkcr\*\shell\<span class="built_in">Path</span> /f</span><br></pre></td></tr></table></figure><p>👆这是删除,上面的add表示添加,对应的就是删除, /f指令表示force,如果没有/f参数,是需要二次确认的,完整命令的意思就是,删除hkcr*\shell\Path键,不提示直接删除</p><h3 id="获取文件名并输出到剪贴板"><a href="#获取文件名并输出到剪贴板" class="headerlink" title="获取文件名并输出到剪贴板"></a>获取文件名并输出到剪贴板</h3><p>上面提到的指令,中的%1就是完整的路径文件名,传入exe中作为一个参数出现的,那么这个exe处理这个参数就可以了</p><p>下面这个是python的实现方法,python确实效率不高,打包之后有6M左右,以后有机会再换C实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> win32clipboard <span class="keyword">as</span> w</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv)&lt;<span class="number">3</span>:</span><br><span class="line">    quit()</span><br><span class="line"></span><br><span class="line">args = sys.argv</span><br><span class="line">fullPathName = args[<span class="number">2</span>][<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 当最后一个是斜杠的时候会有问题,但是暂时没出现最后是斜杠的情况</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="number">1</span>]==<span class="string">&quot;name&quot;</span>:</span><br><span class="line">    cp = fullPathName.split(<span class="string">&quot;\\&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">elif</span> args[<span class="number">1</span>]==<span class="string">&quot;pathu&quot;</span>:</span><br><span class="line">    cp = fullPathName</span><br><span class="line"><span class="keyword">elif</span> args[<span class="number">1</span>]==<span class="string">&quot;pathd&quot;</span>:</span><br><span class="line">    cp = fullPathName.replace(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(cp)</span></span><br><span class="line"></span><br><span class="line">w.OpenClipboard()</span><br><span class="line">w.EmptyClipboard()</span><br><span class="line">w.SetClipboardText(cp)</span><br><span class="line">w.CloseClipboard()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> python </tag>
            
            <tag> 小工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在右键菜单中添加复制文件名或者路径的功能(使用说明)</title>
      <link href="/new/2021/02/10/Right-Menu-To-Copy-Path/"/>
      <url>/new/2021/02/10/Right-Menu-To-Copy-Path/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法:"></a>安装方法:</h3><p><a href="https://github.com/zephms/Right-Menu-To-Copy-Path/releases/download/v0.1/Windows.zip">点击下载</a></p><p>解压Windows.zip,将其中的exe文件放在一个合适的位置(可以根据需要更改文件名)</p><p>然后用记事本或其他文本编辑器打开install.ps1,将下面引号中的exe路径改为上一步放的位置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$exePath</span> = <span class="string">&quot;D:\xxx\rightClick.exe&quot;</span></span><br></pre></td></tr></table></figure><p>在install.ps1所在目录启动powershell,输入:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.ps1</span><br></pre></td></tr></table></figure><p>若没有报错的话,就已经安装好了,exe文件不要随意动,如果动了,需要重新更改install脚本中的文件路径,并安装,不过此时会提示覆盖安装,选择yes就好了. 至于install和uninstall两个脚本,动倒无所谓,别丢了就行,还得下载</p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载:"></a>卸载:</h3><p>用和install.ps1同样的方法,执行uninstall</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./uninstall.ps1</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>目前,多文件选中时,仅复制一个文件的文件名,有啥建议可以来GitHub提issue :)</p><p><a href="https://github.com/zephms/Right-Menu-To-Copy-Path/">zephms/Right-Menu-To-Copy-Path: 给右键菜单添加复制文件名或者路径的功能 (github.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> python </tag>
            
            <tag> 小工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行中使用代理</title>
      <link href="/new/2021/02/07/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/"/>
      <url>/new/2021/02/07/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h5 id="注意-测试代理可用不可用-不要用ping命令-而要使用curl命令-如"><a href="#注意-测试代理可用不可用-不要用ping命令-而要使用curl命令-如" class="headerlink" title="注意:测试代理可用不可用,不要用ping命令,而要使用curl命令,如"></a>注意:测试代理可用不可用,不要用ping命令,而要使用curl命令,如</h5><ul><li><h3 id="针对cmd"><a href="#针对cmd" class="headerlink" title="针对cmd"></a>针对cmd</h3></li></ul><p>在VPN软件中设置一个端口,这里以ssr代理,1080端口为例</p><img src="image-20201212210926621.png" alt="image-20201212210926621" style="zoom:67%;" /><p>在cmd中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://127.0.0.1:1080</span><br><span class="line"><span class="built_in">set</span> https_proxy=https://127.0.0.1:1080</span><br></pre></td></tr></table></figure><ul><li><h3 id="针对powershell"><a href="#针对powershell" class="headerlink" title="针对powershell"></a>针对powershell</h3></li></ul><p>powershell走的是网络层, 正好能被SSR、SS或V2Ray代理，不用手动设置了, 而无需手动设置代理</p><p>但是要是想代理,也不是不行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:http_proxy</span>=<span class="string">&quot;http://127.0.0.1:1080&quot;</span></span><br><span class="line"><span class="variable">$env:https_proxy</span>=<span class="string">&quot;http://127.0.0.1:1080&quot;</span></span><br></pre></td></tr></table></figure><ul><li><h3 id="git-bash"><a href="#git-bash" class="headerlink" title="git bash"></a>git bash</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line">git config --global http.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span> </span><br><span class="line">git config --global https.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过socket进行本地的进程间通信</title>
      <link href="/new/2021/02/06/%E9%80%9A%E8%BF%87socket%E8%BF%9B%E8%A1%8C%E6%9C%AC%E5%9C%B0%E7%9A%84%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/new/2021/02/06/%E9%80%9A%E8%BF%87socket%E8%BF%9B%E8%A1%8C%E6%9C%AC%E5%9C%B0%E7%9A%84%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>我的一个python程序需要写一个界面,最终定的是逻辑使用python,界面使用electron进行开发,electron的逻辑是由node来解释执行的,所以我把python作为node的一个子线程,node进程和python进程之间使用socket进行通信.</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>我需要一个进程等待另一个进程下达指令,接收到指令后,分析并执行,然后给出返回值</p><img src="image-20210206190449967.png" alt="image-20210206190449967" style="zoom: 67%;" /><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>socket的原理简单来说,就是插头和插座, 一个插座可以由任意一个插头插上,插上就可以导电了. 同样,在socket中分为服务器端和客户端,服务器端进行监听,服务端在需要的时候发送数据包到服务端,服务端处理请求,将返回值返回给客户端.</p><p>当然,socket的运行,是需要借用一个端口的,服务端基于端口进行监听,客户端向端口发送数据.</p><p>由于通信协议,这些数据在传输的时候是以字节进行传输的,在python中体现为byte类型,在node中体现为buffer,用这种类型确实可以方便我们精确控制每一个字节传输的内容,而且如果合理利用可以提高传输效率.但是我考虑到byte类型与顶层逻辑之间转换的麻烦,决定使用字符串进行传输,按utf8进行编码.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>服务端:</p><p>服务端处理数据,我设置了一个表示处理数据的函数analysis,这个函数接收一个字符串类型的参数,处理,并返回一个字符串类型的参数.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端代码 python版</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">analysis</span>(<span class="params">str_</span>):</span></span><br><span class="line">    print(str_)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hhh,&quot;</span>+str_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">800</span></span><br><span class="line">address = (host, port)</span><br><span class="line">time_now = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%S:%M&quot;</span>, time.localtime())</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">s.bind(address)</span><br><span class="line">s.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">&quot;Waiting for connections...&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        client_connection, client_address = s.accept()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Got connection from&quot;</span>, client_connection.getpeername())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># client_connection.settimeout(5)</span></span><br><span class="line">            buf = client_connection.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(buf) == <span class="number">0</span>: <span class="comment"># break,跳出while循环</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                client_connection.send(<span class="built_in">bytes</span>(analysis(buf.decode()), encoding=<span class="string">&quot;utf8&quot;</span>))  </span><br><span class="line">    <span class="keyword">except</span> (KeyboardInterrupt, SystemError):</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    client_connection.close()</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    traceback.print_exc()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端代码,node版</span></span><br><span class="line"><span class="comment">// 1 引入模块</span></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> analysis = <span class="function"><span class="keyword">function</span>(<span class="params">str_</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hhh, &quot;</span>+ str_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 创建服务器</span></span><br><span class="line"><span class="keyword">let</span> clientArr = [];</span><br><span class="line"><span class="keyword">const</span> server = net.createServer();</span><br><span class="line"><span class="comment">// 3 绑定链接事件</span></span><br><span class="line">server.on(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">person</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(clientArr.length);</span><br><span class="line">  <span class="comment">// 记录链接的进程</span></span><br><span class="line">  person.id = clientArr.length;</span><br><span class="line">  clientArr.push(person);</span><br><span class="line">  person.setEncoding(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  <span class="comment">// 客户socket进程绑定事件</span></span><br><span class="line">  person.on(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    clientArr.forEach(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 数据写入全部客户进程中</span></span><br><span class="line">      <span class="comment">//////////// 数据在这里处理</span></span><br><span class="line">      val.write(analysis(chunk));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  person.on(<span class="string">&quot;close&quot;</span>, <span class="function">(<span class="params">p1</span>) =&gt;</span> &#123;</span><br><span class="line">    clientArr[p1.id] = <span class="literal">null</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  person.on(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">p1</span>) =&gt;</span> &#123;</span><br><span class="line">    clientArr[p1.id] = <span class="literal">null</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">800</span>);</span><br></pre></td></tr></table></figure><p>客户端:</p><p>客户端由一个csend函数,csend函数唯一的参数就是发送的数据,返回值是从服务器端返回的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端代码, python版</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">port = <span class="number">800</span></span><br><span class="line">address = (host, port)</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect(address)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csend</span>(<span class="params">mes</span>):</span></span><br><span class="line">    s.send(<span class="built_in">bytes</span>(mes, encoding=<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        buf = s.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">return</span> buf.decode()</span><br><span class="line">    <span class="keyword">except</span> e:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Error receiving :&quot;</span>, e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment">#sys.exit(1) # 终止程序用</span></span><br><span class="line"></span><br><span class="line">mes = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">print(csend(mes))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s.shutdown(socket.SHUT_WR)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端代码, node版</span></span><br><span class="line"><span class="comment">// 1 引入模块</span></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&quot;readline&quot;</span>);</span><br><span class="line"><span class="comment">// 2 创建套接字和输入输出命令行</span></span><br><span class="line"><span class="keyword">let</span> rl = readline.createInterface(&#123;</span><br><span class="line">  <span class="comment">// 调用std接口</span></span><br><span class="line">  input: process.stdin,</span><br><span class="line">  output: process.stdout,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> client = <span class="keyword">new</span> net.Socket();</span><br><span class="line"><span class="comment">// 3 链接</span></span><br><span class="line">client.connect(<span class="number">800</span>, <span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"></span><br><span class="line">client.setEncoding(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"><span class="comment">// 绑定输io流事件,获取输入输出字符</span></span><br><span class="line"><span class="comment">// rl.on(&#x27;line&#x27;,(mes)=&gt;&#123;</span></span><br><span class="line"><span class="comment">// client.write(mes);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">client.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">csend</span>(<span class="params">mes</span>) </span>&#123;</span><br><span class="line">  client.write(mes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">csend(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>服务端二选一,运行起来,然后执行客户端代码,客户端也是二选一,运行之后控制台会有输出</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>由于我的python进程需要执行很长时间,因此python部分加入了多线程,一下就是举个例子,似乎不是那么有通用性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">此文件作为python后台的控制中心</span></span><br><span class="line"><span class="string">接收并处理 来自前端和子python进程 的指令 并 启动子线程完成任务</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注,暂时子python进程可以直接向前端发送数据,也可以向此父进程发送数据再转发, 看开发者心情</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">接收信息格式: json字符串</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;command&quot;:&quot;online_check_in&quot; // 必须</span></span><br><span class="line"><span class="string">    &quot;其他&quot;:...  // 其他根据情况选择</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">子进程未设置推出,估计会自动退出,后续解决</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">thread_template</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, threadID, name, get</span>):</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadID = threadID</span><br><span class="line">        self.name = name</span><br><span class="line">        self.get = get</span><br><span class="line">        self.command = get.get(<span class="string">&quot;command&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;开启线程： &quot;</span> + self.name)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;此线程执行的指令为&quot;</span>, self.command)</span><br><span class="line">        <span class="comment"># 此处的get为字典类型,具有command字段,其他字段由传入决定</span></span><br><span class="line">        <span class="keyword">if</span> self.command == <span class="string">&quot;online_check_in&quot;</span>:</span><br><span class="line">            <span class="comment"># camera.m()</span></span><br><span class="line">            <span class="comment">####################<span class="doctag">TODO:</span> 在此处执行此时的方法,可以用全局方法,推荐使用类方法</span></span><br><span class="line">            <span class="comment">#<span class="doctag">TODO:</span>执行线上点名的python脚本</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">elif</span> self.command == <span class="string">&quot;offline_check_in&quot;</span>:</span><br><span class="line">            <span class="comment"># todo:执行线下点名的python脚本</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">elif</span> self.command == <span class="string">&quot;online_check_behavior&quot;</span>:</span><br><span class="line">            <span class="comment"># todo:执行线上行为检测的python脚本</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">elif</span> self.command == <span class="string">&quot;offline_check_behavior_danger&quot;</span>:</span><br><span class="line">            <span class="comment"># todo:执行线下危险行为检测的python脚本</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">elif</span> self.command == <span class="string">&quot;offline_check_behavior_state&quot;</span>:</span><br><span class="line">            <span class="comment"># todo:执行线下状态检测的python脚本</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">elif</span> self.command == <span class="string">&quot;record_face&quot;</span>:</span><br><span class="line">            camera.m()</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;出现了意想不到的情况&quot;</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># 获取锁，用于线程同步</span></span><br><span class="line">        <span class="comment"># threadLock.acquire()</span></span><br><span class="line">        self.print_time(self.name, self.counter, <span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 释放锁，开启下一个线程</span></span><br><span class="line">        <span class="comment"># threadLock.release()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_time</span>(<span class="params">self, threadName, delay, counter</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            print(self.threadID, time.gmtime())</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 锁</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">analysis</span>(<span class="params">str_</span>):</span></span><br><span class="line">    get = json.load(str_)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> get.get(<span class="string">&quot;command&quot;</span>):</span><br><span class="line">        print(<span class="string">&quot;接收数据不包含指令,内容为&quot;</span>,str_)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    th = thread_template(thread_id_count, get.get(<span class="string">&quot;command&quot;</span>), get)</span><br><span class="line">    threads.append(th)</span><br><span class="line">    th.start()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hhh,&quot;</span>+str_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">800</span></span><br><span class="line">address = (host, port)</span><br><span class="line">time_now = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%S:%M&quot;</span>, time.localtime())</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">s.bind(address)</span><br><span class="line">s.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">threads = [] <span class="comment"># 进程们</span></span><br><span class="line">threadLock = threading.Lock() <span class="comment"># 锁</span></span><br><span class="line">thread_id_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">&quot;Waiting for connections...&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        client_connection, client_address = s.accept()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Got connection from&quot;</span>, client_connection.getpeername())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># client_connection.settimeout(5)</span></span><br><span class="line">            buf = client_connection.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(buf) == <span class="number">0</span>: <span class="comment"># break,跳出while循环</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                client_connection.send(<span class="built_in">bytes</span>(analysis(buf.decode()), encoding=<span class="string">&quot;utf8&quot;</span>))  </span><br><span class="line">    <span class="keyword">except</span> (KeyboardInterrupt, SystemError):</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    client_connection.close()</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    traceback.print_exc()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 国内镜像</title>
      <link href="/new/2021/02/04/Python%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/"/>
      <url>/new/2021/02/04/Python%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="一次性使用"><a href="#一次性使用" class="headerlink" title="一次性使用"></a>一次性使用</h3><ul><li>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a>  numpy表示安装numpy库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple </span><br></pre></td></tr></table></figure><ul><li><p>其他的镜像源:<br>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>豆瓣(douban) <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></p></li><li><p>库名查询:</p><p>[PyPi](<a href="https://pypi.org/">PyPI · The Python Package Index</a>)</p></li></ul><h3 id="长期使用"><a href="#长期使用" class="headerlink" title="长期使用"></a>长期使用</h3><p>Windows新建C:\Users\xx\pip\pip.ini文件,</p><p>Linux新建 ~/.pip/pip.conf</p><p>然后填入以下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="attr">trusted-host</span> = pypi.tuna.tsinghua.edu.cn</span><br><span class="line"><span class="attr">disable-pip-version-check</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">timeout</span> = <span class="number">120</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拍一拍文案</title>
      <link href="/new/2021/02/04/%E6%8B%8D%E4%B8%80%E6%8B%8D/"/>
      <url>/new/2021/02/04/%E6%8B%8D%E4%B8%80%E6%8B%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="抄来的微信拍一拍后缀文案"><a href="#抄来的微信拍一拍后缀文案" class="headerlink" title="抄来的微信拍一拍后缀文案"></a>抄来的微信拍一拍后缀文案</h1><p><img src="v2-96944c20753a77154316ce02f3454bc1_b.jpg" alt="100句超火搞笑、微信拍一拍后缀文案！"></p><ol><li><p>拍了拍我的 砖头表示自己很怂</p></li><li><p> 拍了拍我的 衣服掉了一地灰</p></li><li><p> 拍了拍我的 枕头说过去点一起</p></li><li><p> 拍了拍我的 球弹弹弹走鱼尾纹</p></li><li><p> 拍了拍我的 窗户露出一张鬼脸</p></li><li><p> 拍了拍我的 狗子转头就是一口</p></li><li><p>拍了拍我的屁股，然后走人</p></li><li><p>拍了拍我的素颜表示磕碜至极</p></li><li><p>拍了拍我的钱包说养我一辈子</p></li><li><p>拍了拍我的儿子说大哥您好！</p></li><li><p>拍了拍我的米饭说再来十碗</p></li><li><p>拍了拍我的前任坟头并烧了香</p></li><li><p>拍了拍我的垃圾桶说我爱我家</p></li><li><p>拍了拍我的 小脑瓜然后变成猪</p></li><li><p>拍了拍我的 脑门，明明没烧啊</p></li><li><p>拍了拍我的 良心，啊，并没有</p></li><li><p>拍了拍我的 狗头并且踹了一脚</p></li><li><p>拍了拍我的 呆毛表示手感极佳</p></li><li><p>拍了拍我的 头顶却没摸到秀发</p></li><li><p>拍了拍我的 肩膀并喊了声爹</p></li><li><p>拍了拍我的 脑袋怀疑注水过度</p></li><li><p>拍了拍我的 脑瓜表示并不灵光</p></li><li><p>拍了拍我的 膝盖并跳起来打我</p></li><li><p>拍了拍我的 脚并被无情地踹飞</p></li><li><p>拍了拍我的 背，您这泥儿真多</p></li><li><p>拍了拍我的 对象，发现在做梦</p></li><li><p>拍了拍我的 钱包说养我一辈子</p></li><li><p>拍了拍我的方便面并碎了一地</p></li><li><p>拍了拍我的黄瓜并撒了把盐</p></li><li><p>拍了拍我的头像并喊了声爹</p></li><li><p>拍了拍我的狗还和狗抢吃的</p></li><li><p>拍了拍我的肩膀说爸辛苦了</p></li><li><p>拍了拍我的 床说睡吧要梦到我</p></li><li><p>拍了拍我的 床说猪啊还在睡</p></li><li><p>拍了拍我的 飞船表示也想上天</p></li><li><p>拍了拍我的 大奔（一切奢侈品）感到十分嫉妒</p></li><li><p>拍了拍我的 后座说送我回家</p></li><li><p>拍了拍我的钱包说真穷</p></li><li><p>拍了拍我的床让我少睡点</p></li><li><p>拍了拍我的西瓜，想挖一勺</p></li><li><p>拍了拍我的奶茶，想喝一口</p></li><li><p>拍了拍我的八块腹肌直流口水</p></li><li><p>拍了拍我的胸说“咋这大个”</p></li><li><p>拍了拍我的我的领导说，开了我</p></li><li><p>拍了拍我的自己的马屁</p></li><li><p>拍了拍我的小嘴说女人你在玩火</p></li><li><p>拍了拍我的脑袋说要快快长大</p></li><li><p>拍了拍我的脑袋说没事小家伙</p></li><li><p>拍了拍我的肚子决定请她吃饭</p></li><li><p>拍了拍我的头却听到噗通噗通</p></li><li><p>拍了拍我的小脑袋觉得很可爱</p></li><li><p>拍了拍我的肚子问：几个月了</p></li><li><p>拍了拍我的小脸并啵儿了一口</p></li><li><p>拍了拍我的头被一脚踹飞</p></li><li><p>拍了拍我的小屁股被揍了</p></li><li><p>拍了拍我的膝盖还要搭梯子</p></li><li><p>拍了拍我的脸蛋说美女在吗</p></li><li><p>拍了拍我的头说你是仙女吗</p></li><li><p>拍了拍我的胸发现她并没有</p></li><li><p>拍了拍我的的素颜照被吓哭</p></li><li><p>拍了拍我的前任遗照上的灰尘</p></li><li><p>拍了拍我的的世界第一帅证书</p></li><li><p>拍了拍我的的世界第一美证书</p></li><li><p>拍了拍我的马桶，留下了口水</p></li><li><p>拍了拍我的车,说打工不可能的</p></li><li><p>拍了拍我的小鹿说怎么还不撞</p></li><li><p>拍了拍我的钱包决定给她转账</p></li><li><p>拍了拍我的傻逼队友的脑瓜子</p></li><li><p>拍了拍我的桃树说要快点开花</p></li><li><p>拍了拍我的窗户露出一张鬼脸</p></li><li><p>拍了拍我的砖头表示自己很怂</p></li><li><p>拍了拍我的桌子，姐就是不服</p></li><li><p>拍了拍我的喇叭，前面的让开</p></li><li><p>拍了拍我的城堡大门却被赶走</p></li><li><p>拍了拍我的网易云，说生而为人</p></li><li><p>拍了拍我的兰博基尼让我载她</p></li><li><p>拍了拍我的胸说好大</p></li><li><p>拍了拍我的肩膀说爸你辛苦了</p></li><li><p>拍了拍我的头 并叫了声爸爸</p></li><li><p>拍了拍我的尊贵的脚指头</p></li><li><p>拍了拍我的男朋友（易烊千玺，王源，王俊凯，杨洋，李易峰等等）</p></li><li><p>拍了拍我的女朋友（赵丽颖，迪丽热巴，古力娜扎等等）</p></li><li><p>拍了拍我的宇宙飞船要我让座</p></li><li><p>拍了拍我的脑袋瓜说 真聪明</p></li><li><p>拍了拍我的充满智慧的大脑</p></li><li><p>拍了拍我的膝盖说 拍不到头</p></li><li><p>拍了拍我的鞋说 假的</p></li><li><p>拍了拍我的小脑瓜 然后变成猪</p></li><li><p>拍了拍我的 良心 啊 没有</p></li><li><p>拍了拍我的 圆润肚子 还可以吃</p></li><li><p>拍了拍我的肩膀，说你真的不胖</p></li><li><p>拍了拍我的手说：就这？</p></li><li><p>拍了拍我的 后背叫了声大哥</p></li><li><p>拍了拍我的 问你不会百度吗</p></li><li><p>拍了拍我的 头发说什么洗发水</p></li><li><p>拍了拍我的 瘪钱包哭出了声</p></li><li><p>拍了拍我的 饭碗给了一只鸡腿</p></li><li><p>拍了拍我的 仙人掌哈哈大笑</p></li><li><p>拍了拍我的 宠物叫了声祖宗</p></li><li><p>拍了拍我的 皮肤说吹弹可破</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10路径过长 解决办法</title>
      <link href="/new/2021/02/04/%E8%B7%AF%E5%BE%84%E8%BF%87%E9%95%BF/"/>
      <url>/new/2021/02/04/%E8%B7%AF%E5%BE%84%E8%BF%87%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>还在解决中,先填坑占位</p><img src="%E8%B7%AF%E5%BE%84%E8%BF%87%E9%95%BF/image-20210204210025986.png" alt="image-20210204210025986" style="zoom: 67%;" /><p>经查证,原有文件名字路径长度</p><p>C:\Users\m1576\Desktop\behavior-electron-vue-master\node_modules\pac-proxy-agent\node_modules\https-proxy-agent.github</p><p>这是由于全局utf8导致的</p>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/new/2021/02/03/hello-world/"/>
      <url>/new/2021/02/03/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>经典的问候(这里应该有一张图片,但是还无法显示,目前努力中)</p><img src="source/img/assets/image-20210204134821689.png" alt="image-20210204134821689" style="zoom:25%;" />]]></content>
      
      
      
        <tags>
            
            <tag> Hello world </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
